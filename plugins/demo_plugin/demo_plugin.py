"""
Demo Plugin for Cloud Craver

A simple plugin to test the plugin system functionality.
"""

import logging
from typing import Dict, Any, List, Type

# Import from the plugin system
import sys
from pathlib import Path

# Add src to path so we can import from plugins
src_path = Path(__file__).parent.parent.parent / "src"
sys.path.insert(0, str(src_path))

from plugins.core import TemplatePlugin, PluginManifest

logger = logging.getLogger(__name__)


class DemoTemplate:
    """Simple demo template class."""
    
    def __init__(self, name: str, variables: Dict[str, Any] = None):
        self.name = name
        self.variables = variables or {}
    
    def generate(self) -> str:
        """Generate demo template content."""
        return f"""# Demo Template: {self.name}
# Generated by Cloud Craver Demo Plugin
# Variables: {self.variables}

This is a demo template that shows the plugin system is working!
"""
    
    def validate(self) -> bool:
        """Validate the template."""
        return True
    
    def render(self) -> str:
        """Render the template."""
        return self.generate()


class DemoPlugin(TemplatePlugin):
    """
    Demo plugin that demonstrates basic plugin functionality.
    """
    
    async def initialize(self) -> bool:
        """Initialize the demo plugin."""
        logger.info("Initializing Demo Plugin")
        self.register_hook('template_create', self._on_template_create)
        return True
    
    async def activate(self) -> bool:
        """Activate the demo plugin."""
        logger.info("Demo Plugin activated successfully")
        return True
    
    async def deactivate(self) -> bool:
        """Deactivate the demo plugin."""
        logger.info("Demo Plugin deactivated")
        return True
    
    async def cleanup(self) -> bool:
        """Clean up demo plugin resources."""
        logger.info("Demo Plugin cleanup completed")
        return True
    
    def get_template_class(self) -> Type:
        """Return the demo template class."""
        return DemoTemplate
    
    def get_supported_providers(self) -> List[str]:
        """Return supported providers."""
        return ["demo", "test"]
    
    async def _on_template_create(self, template_name: str):
        """Hook called when a template is created."""
        logger.info(f"Demo Plugin: Template created - {template_name}") 